name: Nightly

on:
  workflow_dispatch:
    inputs:
      name:
        description: "Manual trigger"
  schedule:
    - cron:  '0 4 * * *'

jobs:

  micro_ros_build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - distro: foxy
            branch: foxy
            image: ubuntu:20.04
          - distro: rolling
            branch: main
            image: ubuntu:jammy
          - distro: galactic
            branch: galactic
            image: ubuntu:20.04
          - distro: humble
            branch: humble
            image: ubuntu:jammy
    container:
      image: ${{ matrix.image }}

    steps:
      - uses: actions/checkout@v2
        with:
          path: src/micro_ros_setup
          ref: ${{ matrix.branch }}

      - uses: ros-tooling/setup-ros@0.3.2
        with:
          use-ros2-testing: false
          required-ros-distributions: ${{ matrix.distro }}

      - name: Dependencies
        run: |
          apt update
          apt install -y python3-colcon-metadata python3-pip
          rosdep update --rosdistro ${{ matrix.distro }}
          rosdep install --rosdistro ${{ matrix.distro }} -y --from-paths src --ignore-src -y

      - name: Build
        run: |
          . /opt/ros/${{ matrix.distro }}/setup.sh
          colcon build

      - name: Install micro-ROS build system
        run: |
            (test -f install/micro_ros_setup/lib/micro_ros_setup/build_firmware.sh) && true || false

      - uses: actions/upload-artifact@v1
        with:
          name: micro_ros_build_${{ matrix.branch }}
          path: install

  micro_ros_client:
    runs-on: ubuntu-latest
    needs: micro_ros_build

    strategy:
      fail-fast: false
      matrix:
        include:

          - distro: galactic
            branch: galactic
            image: ubuntu:20.04
            rtos: mbed
            platform: disco_l475vg_iot01a
            binary: 'firmware/micro_ros_mbed/cmake_build/DISCO_L475VG_IOT01A/develop/GCC_ARM/micro_ros_mbed.bin'
    container:
      image: ${{ matrix.image }}
    steps:
      - uses: actions/checkout@v2
        with:
          path: src/micro_ros_setup
          ref: ${{ matrix.branch }}

      - uses: ros-tooling/setup-ros@0.3.2
        with:
          use-ros2-testing: false
          required-ros-distributions: ${{ matrix.distro }}

      - name: Dependencies
        run: |
          apt update
          apt upgrade -y
          # Install last version of CMake
          if [ ${{ matrix.rtos }} = "mbed" ] &&  [ $(lsb_release -sr) = "20.04" ]; then
            echo "Adding Kitware CMake repo to install latest CMake"
            apt install -y apt-transport-https ca-certificates gnupg software-properties-common wget
            wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null
            apt-add-repository 'deb https://apt.kitware.com/ubuntu/ focal main'
          else
            echo "Using Ubuntu mainline CMake"
          fi
          apt-get update
          apt install -y python3-colcon-metadata python3-pip cmake
          rosdep update --rosdistro ${{ matrix.distro }}
          rosdep install --rosdistro ${{ matrix.distro }} -y --from-paths src --ignore-src -y

      - uses: actions/download-artifact@v1
        with:
          name: micro_ros_build_${{ matrix.branch }}
          path: install

      # Workaround https://github.com/actions/upload-artifact/issues/38
      - run: |
          chmod +x -R install

      - name: Configure and build micro-ROS
        run: |
          . /opt/ros/${{ matrix.distro }}/setup.sh
          . install/local_setup.sh
          ros2 run micro_ros_setup create_firmware_ws.sh ${{ matrix.rtos }} ${{ matrix.platform }}
          ros2 run micro_ros_setup configure_firmware.sh ${{ matrix.configuration }} ${{ matrix.transport_arguments }}
          ros2 run micro_ros_setup build_firmware.sh ${{ matrix.build_arguments }}

      - name: Check binaries
        run: |
          (test -f ${{ matrix.binary }}) && true || false

  micro_ros_agent:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - distro: foxy
            branch: foxy
            image: ubuntu:20.04
          - distro: rolling
            branch: main
            image: ubuntu:jammy
          - distro: galactic
            branch: galactic
            image: ubuntu:20.04
          - distro: humble
            branch: humble
            image: ubuntu:jammy
    container:
      image: ${{ matrix.image }}
    needs: micro_ros_build

    steps:
      - uses: actions/checkout@v2
        with:
          path: src/micro_ros_setup
          ref: ${{ matrix.branch }}

      - uses: ros-tooling/setup-ros@0.3.2
        with:
          use-ros2-testing: false
          required-ros-distributions: ${{ matrix.distro }}

      - name: dependencies
        run: |
          apt update
          apt install -y python3-colcon-metadata python3-pip
          rosdep update --rosdistro ${{ matrix.distro }}
          rosdep install --rosdistro ${{ matrix.distro }} -y --from-paths src --ignore-src -y
          apt install -y ros-${{ matrix.distro }}-rmw-fastrtps-cpp

      - uses: actions/download-artifact@v1
        with:
          name: micro_ros_build_${{ matrix.branch }}
          path: install

      # Workaround https://github.com/actions/upload-artifact/issues/38
      - run: |
          chmod +x -R install

      - name: build
        run: |
          . /opt/ros/${{ matrix.distro }}/setup.sh
          . install/local_setup.sh
          ros2 run micro_ros_setup create_agent_ws.sh
          ros2 run micro_ros_setup build_agent.sh

      - name: installation
        run: |
            (test -f install/micro_ros_agent/lib/micro_ros_agent/micro_ros_agent) && true || false
